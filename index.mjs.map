{"version":3,"file":"index.mjs","sources":["../lib/pdf.js","../lib/factory.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar exp = require( '@stdlib/math-base-special-exp' );\nvar pow = require( '@stdlib/math-base-special-pow' );\nvar sqrt = require( '@stdlib/math-base-special-sqrt' );\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar normal = require( '@stdlib/stats-base-dists-normal-cdf' ).factory;\nvar PI = require( '@stdlib/constants-float64-pi' );\n\n\n// VARIABLES //\n\nvar normalCDF = normal( 0.0, 1.0 );\n\n\n// MAIN //\n\n/**\n* Evaluates the probability density function (PDF) for a truncated normal distribution with endpoints `a` and `b`, location parameter `mu` and scale parameter `sigma` at a value `x`.\n*\n* @param {number} x - input value\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @param {number} mu - location parameter\n* @param {PositiveNumber} sigma - scale parameter\n* @returns {number} evaluated PDF\n*\n* @example\n* var y = pdf( 0.9, 0.0, 1.0, 0.0, 1.0 );\n* // returns ~0.7795\n*\n* @example\n* var y = pdf( 0.9, 0.0, 1.0, 0.5, 1.0 );\n* // returns ~0.9617\n*\n* @example\n* var y = pdf( 0.9, -1.0, 1.0, 0.5, 1.0 );\n* // returns ~0.5896\n*\n* @example\n* var y = pdf( 1.4, 0.0, 1.0, 0.0, 1.0 );\n* // returns 0.0\n*\n* @example\n* var y = pdf( -0.9, 0.0, 1.0, 0.0, 1.0 );\n* // returns 0.0\n*/\nfunction pdf( x, a, b, mu, sigma ) {\n\tvar s2x2;\n\tvar A;\n\tvar B;\n\tvar C;\n\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\tsigma <= 0.0 ||\n\t\ta >= b\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x < a || x > b ) {\n\t\treturn 0.0;\n\t}\n\ts2x2 = 2.0 * pow( sigma, 2.0 );\n\tA = 1.0 / ( sqrt( s2x2 * PI ) );\n\tB = -1.0 / ( s2x2 );\n\tC = normalCDF( (b-mu)/sigma ) - normalCDF( (a-mu)/sigma );\n\treturn A * exp( B * pow( x - mu, 2.0 ) ) / C;\n}\n\n\n// EXPORTS //\n\nmodule.exports = pdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar constantFunction = require( '@stdlib/utils-constant-function' );\nvar exp = require( '@stdlib/math-base-special-exp' );\nvar pow = require( '@stdlib/math-base-special-pow' );\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar sqrt = require( '@stdlib/math-base-special-sqrt' );\nvar normal = require( '@stdlib/stats-base-dists-normal-cdf' ).factory;\nvar PI = require( '@stdlib/constants-float64-pi' );\n\n\n// VARIABLES //\n\nvar normalCDF = normal( 0.0, 1.0 );\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the probability density function (PDF) for a truncated normal distribution with endpoints `a` and `b`, mean `mu` and standard deviation `sigma`.\n*\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @param {number} mu - location parameter\n* @param {PositiveNumber} sigma - scale parameter\n* @returns {Function} PDF\n*\n* @example\n* var myPDF = factory( 0.0, 1.0, 0.0, 1.0 );\n* var y = myPDF( 0.8 );\n* // returns ~0.849\n*\n* @example\n* var myPDF = factory( 0.0, 1.0, 0.5, 1.0 );\n* var y = myPDF( 0.8 );\n* // returns ~0.996\n*\n* @example\n* var myPDF = factory( 0.0, 1.0, 0.0, 1.0 );\n* var y = myPDF( 2.0 );\n* // returns 0.0\n*\n* @example\n* var myPDF = factory( 0.0, 1.0, 0.0, 1.0 );\n* var y = myPDF( -1.0 );\n* // returns 0.0\n*/\nfunction factory( a, b, mu, sigma ) {\n\tvar s2x2;\n\tvar A;\n\tvar B;\n\tvar C;\n\n\tif (\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\tisnan( mu ) ||\n\t\tisnan( sigma ) ||\n\t\tsigma <= 0.0 ||\n\t\ta >= b\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\ts2x2 = 2.0 * pow( sigma, 2.0 );\n\tA = 1.0 / ( sqrt( s2x2 * PI ) );\n\tB = -1.0 / ( s2x2 );\n\tC = normalCDF( (b-mu)/sigma ) - normalCDF( (a-mu)/sigma );\n\treturn pdf;\n\n\t/**\n\t* Evaluates the probability density function (PDF) for a truncated normal distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated PDF\n\t*/\n\tfunction pdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < a || x > b ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn A * exp( B * pow( x - mu, 2.0 ) ) / C;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Truncated normal distribution probability density function (PDF).\n*\n* @module @stdlib/stats-base-dists-truncated-normal-pdf\n*\n* @example\n* var pdf = require( '@stdlib/stats-base-dists-truncated-normal-pdf' );\n*\n* var y = pdf( 0.9, 0.0, 1.0, 0.0, 1.0 );\n* // returns ~0.7795\n*\n* var mypdf = pdf.factory( -1.0, 1.0, 0.0, 1.0 );\n* y = mypdf( 0.9 );\n* // returns ~0.5896\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar pdf = require( './pdf.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( pdf, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = pdf;\n"],"names":["exp","require$$0","pow","require$$1","sqrt","require$$2","isnan","require$$3","normal","require$$4","factory","PI","require$$5","normalCDF","pdf_1","x","a","b","mu","sigma","s2x2","A","B","C","NaN","constantFunction","require$$6","pdf","lib"],"mappings":";;0uBAsBA,IAAIA,EAAMC,EACNC,EAAMC,EACNC,EAAOC,EACPC,EAAQC,EACRC,EAASC,EAAiDC,QAC1DC,EAAKC,EAKLC,EAAYL,EAAQ,EAAK,GA+D7B,IAAAM,EA5BA,SAAcC,EAAGC,EAAGC,EAAGC,EAAIC,GAC1B,IAAIC,EACAC,EACAC,EACAC,EAEJ,OACCjB,EAAOS,IACPT,EAAOU,IACPV,EAAOW,IACPE,GAAS,GACTH,GAAKC,EAEEO,IAEHT,EAAIC,GAAKD,EAAIE,EACV,GAERG,EAAO,EAAMlB,EAAKiB,EAAO,GACzBE,EAAI,EAAQjB,EAAMgB,EAAOT,GACzBW,GAAK,EAAQ,EACbC,EAAIV,GAAYI,EAAEC,GAAIC,GAAUN,GAAYG,EAAEE,GAAIC,GAC3CE,EAAIrB,EAAKsB,EAAIpB,EAAKa,EAAIG,EAAI,IAAUK,ICnExCE,EAAmBxB,EACnBD,EAAMG,EACND,EAAMG,EACNC,EAAQC,EACRH,EAAOK,EACPD,EAASI,EAAiDF,QAC1DC,EAAKe,EAKLb,EAAYL,EAAQ,EAAK,GA6E7B,ICvEAmB,EAAAxB,EACAO,ED2BA,SAAkBM,EAAGC,EAAGC,EAAIC,GAC3B,IAAIC,EACAC,EACAC,EACAC,EAEJ,OACCjB,EAAOU,IACPV,EAAOW,IACPX,EAAOY,IACPZ,EAAOa,IACPA,GAAS,GACTH,GAAKC,EAEEQ,EAAkBD,MAE1BJ,EAAO,EAAMlB,EAAKiB,EAAO,GACzBE,EAAI,EAAQjB,EAAMgB,EAAOT,GACzBW,GAAK,EAAQ,EACbC,EAAIV,GAAYI,EAAEC,GAAIC,GAAUN,GAAYG,EAAEE,GAAIC,GAUlD,SAAcJ,GACb,GAAKT,EAAOS,GACX,OAAOS,IAER,GAAKT,EAAIC,GAAKD,EAAIE,EACjB,OAAO,EAER,OAAOI,EAAIrB,EAAKsB,EAAIpB,EAAKa,EAAIG,EAAI,IAAUK,KCjE7CtB,EAOA0B,EAAA,UAAAjB,GAKA,IAAAkB,EAAAD"}